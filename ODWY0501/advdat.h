
#ifndef H_ADVDAT
 #define H_ADVDAT
 
#include <stdbool.h>

typedef enum {
    R_INHAND = -1, R_LIMBO = 0,
    R_ROAD, R_HILL, R_HOUSE, R_VALLEY, R_FOREST, R_FOREST2, R_SLIT, R_OUTSIDE,
    R_INSIDE, MIN_IN_CAVE = R_INSIDE,
    R_COBBLES, R_DEBRIS, R_AWK, R_BIRD, R_SPIT,
    R_EMIST, MIN_LOWER_LOC = R_EMIST,
    R_NUGGET, R_EFISS, R_WFISS, R_WMIST,
    R_MAZEA42, R_MAZEA43, R_MAZEA44, R_MAZEA45, R_MAZEA49, R_MAZEA50, R_MAZEA51,
    R_MAZEA52, R_MAZEA53, R_MAZEA55, R_MAZEA80, R_MAZEA83, R_MAZEA84, R_MAZEA87,
    R_BRINK, R_ELONG, R_WLONG,
    R_DIFF0, R_DIFF1, R_DIFF2, R_DIFF3, R_DIFF4, R_DIFF5,
    R_DIFF6, R_DIFF7, R_DIFF8, R_DIFF9, R_DIFF10,
    R_PONY, R_CROSS, R_HMK, R_WEST, R_SOUTH, R_NS, R_Y2, R_JUMBLE, R_WINDOE,
    R_DIRTY, R_CLEAN, R_WET, R_DUSTY, R_COMPLEX,
    R_SHELL, R_ARCHED, R_RAGGED, R_SAC, R_ANTE, R_WITT,
    R_BEDQUILT, R_SWISS, R_SOFT,
    R_E2PIT, R_W2PIT, R_EPIT, R_WPIT,
    R_NARROW, R_GIANT, R_BLOCK, R_IMMENSE,
    R_FALLS, R_INCLINE, R_ABOVEP, R_SJUNC,
    R_TITE, R_LOW, R_CRAWL, R_WINDOW,
    R_ORIENTAL, R_MISTY, R_ALCOVE, R_PLOVER, R_DARK,
    R_SLAB, R_ABOVER, R_MIRROR, R_RES,
    R_SCAN1, R_SCAN2, R_SCAN3, R_SECRET,
    R_WIDE, R_TIGHT, R_TALL, R_BOULDERS,
    R_SLOPING, R_SWSIDE,
    R_DEAD0, R_MAZEA81, R_PIRATES_NEST, R_MAZEA46, R_MAZEA47, R_MAZEA48,
    R_MAZEA54, R_MAZEA56, R_MAZEA58, R_MAZEA82, R_MAZEA85, R_MAZEA86,
    R_NESIDE, R_CORR, R_FORK, R_WARM, R_VIEW, R_CHAMBER,
    R_LIME, R_FBARR, R_BARR,
    R_NEEND, R_SWEND,

    R_SWORD, R_CHIMTOP, R_PRIVATE, R_THRONE, R_WHIRLPOOL, R_DENSE, R_KNOLL,
    R_MARSH_EDGE, R_MARSH149, R_MARSH150, R_MARSH151, R_MARSH152,
    R_BEACH, R_BROKEN, R_CLIFF, R_CLIFFJUMP, R_THUNDER, R_TINYDOOR,
    R_CRAMPED, R_HUGEDOOR, R_SHRINKING, R_GROWING, R_GROWING2, R_SHRINKING2,
    R_NECK2, R_WBLUE, R_SEA, R_EBLUE, R_BUBBLE, R_WINDY, R_BATCAVE,
    R_TIGHT_NS, R_TIGHT_NS_BLOCKED, R_CLOAKROOM, R_PITS, R_FPIT,
    R_HIGH, R_DEFILE, R_TONGUE, R_UPPER,
    R_STAR, R_ELBOW, R_DEAD185, R_NWNE, R_NARROW_EW, R_ROTUNDA,
    R_BOOTH, R_DEVILS, R_DEAD191, R_GRAVEL, R_FLOWER, R_ESHORT,
    R_ESHORT_RUBBLE, R_ARCHED_RUBBLE, R_VESTIBULE, R_FAIRY,
    R_CRYSTAL, R_YELLOW, R_RAINBOW, R_COLD, R_ICE,
    R_OVER, R_GREEN, R_RED, R_SLOST, R_WLOST, R_NICHE, R_TREACHEROUS,
    R_REPO_BOOTH, R_ELEVEL, R_COVE, R_BASIN, R_SPILLWAY, R_WINERY,
    R_PINNACLES, R_GOTHIC, R_EGOTHIC, R_WGOTHIC, R_ALTAR, R_BROAD,
    R_CRYPT, R_CHAPEL, R_ALLOVER, R_APPROACH, R_WSTYX, R_ESTYX,
    R_SPIRES, R_SKEWERED, R_POLE_E, R_POLE_S, R_POLE_N, R_DANTES,
    R_ELOST, R_PANTRY, R_BAY, R_CASTLE, R_OUTER,
    R_KAL_RED, R_KAL_ORANGE, R_KAL_YELLOW, R_KAL_GREEN, R_KAL_BLUE,
    R_KAL_PURPLE, R_INNER,

    R_NECK, R_LOSE, R_CLIMB, R_CHECK,
    R_THRU, R_DUCK, R_UPNOUT,
    R_DIDIT, MAX_LOC = R_DIDIT,
    
    R_PPASS, R_PDROP, R_TROLL, R_PHUCE, R_GNOME, R_CLAY, R_KALEIDOSCOPE,
    FIRST_REMARK
} Location;


typedef enum {
    WordClass_None, WordClass_Motion, WordClass_Object,
    WordClass_Action, WordClass_Message,
    WordClass_Preposition, WordClass_Adjective,
    WordClass_Conjunction, WordClass_BadWord
} WordClass;

#define NOTHING 0

typedef enum {
    MIN_MOTION=100,
    ROAD=MIN_MOTION,ENTER,UPSTREAM,DOWNSTREAM,FOREST,FORWARD,
    BACK,VALLEY,STAIRS,OUT,HOUSE,GULLY,STREAM,ROCK,
    BED,CRAWL,COBBLES,IN,SURFACE,NOWHERE,DARK,PASSAGE,
    LOW,CANYON,AWKWARD,GIANT,VIEW,U,D,PIT,OUTDOORS,
    CRACK,STEPS,DOME,LEFT,RIGHT,HALL,JUMP,BARREN,
    OVER,ACROSS,E,W,N,S,NE,SE,SW,NW,DEBRIS,HOLE,
    WALL,BROKEN,Y2,CLIMB,PANTRY,FLOOR,ROOM,SLIT,
    SLAB,XYZZY,DEPRESSION,ENTRANCE,PLUGH,SECRET,
    CAVE,CROSS,BEDQUILT,PLOVER,ORIENTAL,CAVERN,
    SHELL,RESERVOIR,OFFICE,FORK,CHIMNEY,SLIDE,
    WHIRLPOOL,KNOLL,PHUCE,LEDGE,THUNDER,CLICK,
    ICE,BRIDGE,ALTAR,GROTTO,PRAY,SAINT_MICHEL,
    MAX_MOTION=SAINT_MICHEL
} MotionWord;

typedef enum {
    MIN_OBJ=300,
    LAMP=MIN_OBJ, GRATE, GRATE_, CAGE, ROD, ROD2, TREADS, TREADS_,
    POLE, PILLOW, SNAKE, FISSURE, FISSURE_, TABLET, CLAM, OYSTER,
    MAG, DWARF, KNIFE, FOOD, BOTTLE, CHASM, CHASM_, CLAY, CLAY_,
    MIRROR, MIRROR_, PLANT, PLANT_, PLANT2, PLANT2_, STALACTITE,
    SHADOW, SHADOW_, AXE, DRAWINGS, PIRATE, DRAGON, DRAGON_,
    TROLL, TROLL_, NO_TROLL, NO_TROLL_, BEAR, MESSAGE, GORGE,
    MACHINE, BATTERIES, MOSS, RUSTY_DOOR, TINY_DOOR, TINY_DOOR_,
    HUGE_DOOR, HUGE_DOOR_, BOOTH_DOOR, BOOTH_DOOR_, FLOWERS, CLOAK,
    BOAT, STICKS, GOLD, DIAMONDS, HORN, JEWELS, COINS, CHEST, EGGS,
    TRIDENT, VASE, EMERALD, PYRAMID, PEARL, RUG, RUG_, SPICES, CHAIN,
    SWORD, CROWN, SHOES, LYRE, SAPPHIRE, GRAIL, CASK, RING, CLOVER,
    TREE, DROPLET, WATER, WATER_IN_CASK, OIL, OIL_IN_CASK,
    WINE, WINE_IN_CASK, BEES, ECHO, ECHO_, SAFE_WALL, TINY_KEY,
    ANVIL, CLOAKROOM_ROCKS, BOOTH, PHONE, SLUGS, HONEY, HIVE, DOG,
    WUMPUS, BIRD, KEYS, FOUNTAIN, BATS, GNOME, MUSHROOMS, CAKES,
    SACK, BOOK, REPO_BOOK, SAFE, POSTER, BROOM, CARVING,
    DUSTY_ROCKS, BILLBOARD, CANISTER, RADIUM, BALL, ALL,
    MAX_OBJ=ALL
} ObjectWord;

/* Notice that ATTACK and HIT are two different verbs now. */
typedef enum {
    MIN_ACTION=500,
    TAKE=MIN_ACTION, DROP, SAY, OPEN, RELAX, CLOSE, LIGHT, EXTINGUISH,
    WAVE, CALM, GO, KILL, POUR, EAT, DRINK, RUB, TOSS, FIND, INVENTORY,
    FEED, FILL, BLAST, SCORE, FEEFIE, BRIEF, READ, BREAK, WAKE, YANK,
    WEAR, HIT, ANSWER, BLOW, LEAVE, CALL, DIAL, PLAY, PICK, PUT, TURN,
    GET, INSERT, REMOVE, BURN, GRIPE, LOCK, UNLOCK, DIAGNOSE, LOOK,
    COMBO, SWEEP, TERSE, WIZ, MAP, GATE, PIRLOC,
#ifdef SAVE_AND_RESTORE
    SAVE, RESTORE,
#endif /* SAVE_AND_RESTORE */
    QUIT,
    MAX_ACTION=QUIT
} ActionWord;

typedef enum {
    MIN_MESSAGE=600,
    ABRA=MIN_MESSAGE, HELP, TREES, DIG, LOST, MIST, FUCK, STOP, SWIM,
    /* Long's version expands the scatological responses too. */
    SHIT, PISS,
    MAX_MESSAGE=PISS
} MessageWord;

typedef enum {
    MIN_PREPOSITION=700,
    INTO=MIN_PREPOSITION, ONTO, WITH, TO, FROM, OFF, PREP_UP, PREP_DOWN, AT,
    MAX_PREPOSITION=AT
} PrepositionWord;

typedef enum {
    MIN_ADJECTIVE=800,
    GOLDEN=MIN_ADJECTIVE, PERSIAN, WOODEN, BRASS, WICKER, BLACK, VELVET,
    VENDING, WORNOUT, FRESH, IRON, TINY, SILKEN, SILVER, TREASURE, MING,
    PLATINUM, RARE, ELFIN, RUBY, HOLY, OAKEN, LEADEN, LEATHER, STEEL,
    STAR, SHADOWY, RUSTY, ADJ_GIANT, TASTY, GLOWING, GREEN, GREY,
    CRYSTAL, FOURLEAF, METAL, QUARTZ,
    MAX_ADJECTIVE=QUARTZ
} AdjectiveWord;

typedef enum {
    MIN_CONJUNCTION=900,
    AND=MIN_CONJUNCTION,
    MAX_CONJUNCTION=AND
} ConjunctionWord;

#define BAD_WORD 999

struct ObjectData {
    struct ObjectData *link;
    struct ObjectData *contents;
    struct ObjectData *base;
    int prop;
    int place;
    const char *name;
    const char *desc[7];  /* .prop ranges from 0 to 6 (WUMPUS) TODO */
    unsigned int flags;
};
extern struct ObjectData objs_[MAX_OBJ+1 - MIN_OBJ];
#define objs(t) objs_[(t)-MIN_OBJ]

enum objectFlagsBits {
    F_OPEN = 0x001,
    F_LOCKED = 0x002,
    F_WORN = 0x004
};

struct Place {
    const char *long_desc;
    const char *short_desc;
    unsigned int flags;
    struct ObjectData *objects;
    int visits;
};
extern struct Place places[MAX_LOC+1];

enum placesFlagsBits {
    F_LIGHTED    = 0x001,
    F_WATER      = 0x004,
    F_CAVE_HINT  = 0x008,
    F_BIRD_HINT  = 0x010,
    F_SNAKE_HINT = 0x020,
    F_TWIST_HINT = 0x040,
    F_DARK_HINT  = 0x080,
    F_WITT_HINT  = 0x100,
    F_OUTSIDE    = 0x200,
    F_PORTAL     = 0x400
};

WordClass word_class(int word);
int lookup(const char *spelling, WordClass desired_class);
bool pct(int percent);
bool streq(const char *a, const char *b);
int ran(int range);
bool blind_at(Location loc);
bool dwarf_at(Location loc);
bool here(ObjectWord t, Location loc);
bool is_at_loc(ObjectWord t, Location loc);
bool at_hand(ObjectWord t, Location loc);
ObjectWord liquid_contents(ObjectWord vessel);
ObjectWord liquid_at_location(Location loc);
void noway(void);
void confuz(void);

#define is_immobile(t) (objs(t).base != NULL)
#define there(t, loc) (objs(t).place == (loc))

#include "getwds.h"
#include "objprop.h"

#endif /* H_ADVDAT */
